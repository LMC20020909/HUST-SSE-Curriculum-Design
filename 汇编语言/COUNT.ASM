.386
DATA SEGMENT USE16
N		DW		0
NUM		DW      0
ISOK	DW      0
READ	DW		0
ISGET	DW		0
MULT	DW		1		
OKNUM	DW		10 DUP(0)
BUF		DB		64		
		DB		0
		DB		64 DUP(0)
OUT1	DB		'Please input N(the amount of the numbers you want to count)', 0DH, 0AH, '$'
OUT2	DB		'Input ERROR!', 0DH, 0AH, '$'
OUT3	DB		'The amount is $'
OUT4	DB		'N is too big!', 0DH, 0AH, '$'
OUT5	DB		'Plead input $'
OUT6	DB		' numbers!', 0DH, 0AH, '$'
CLINE	DB		0DH, 0AH, '$'
OUTNUM	DB		0
DATA ENDS

STACK SEGMENT USE16 STACK
        DW      100 DUP(0)
STACK ENDS

CODE SEGMENT USE16
        ASSUME DS:DATA, CS:CODE, SS:STACK
START:  MOV AX, DATA
		MOV DS, AX
		MOV AX, STACK
		MOV SS, AX
		LEA DX, OUT1
		MOV AH, 9
		INT 21H
LOOPC:	CALL INPUT
		CMP WORD PTR ISGET, 1H
		JNE LOOPC
		CMP WORD PTR READ, 10
		JA	OVER
		JMP NORMAL
OVER:	LEA DX, OUT4
		MOV AH, 9
		INT 21H
		JMP LOOPC
NORMAL:	MOV AX, WORD PTR READ
		MOV N, AX
		MOV CX, AX
		MOV BX, 0
		LEA DX, OUT5
		MOV AH, 9
		INT 21H
		MOV AX, WORD PTR N
		MOV WORD PTR OUTNUM, AX
		CALL OUTPUT
		LEA DX, OUT6
		MOV AH, 9
		INT 21H
LOOPF:	CMP CX, 0
		JE LOOPFND
LOOPG:	CALL INPUT
		CMP WORD PTR ISGET, 1H
		JNE LOOPG
		PUSH WORD PTR READ
		CALL JUDGE
		CMP WORD PTR ISOK, 1
		JNE NOTOK
		INC WORD PTR NUM
		MOV AX, WORD PTR READ
		MOV WORD PTR OKNUM[BX], AX
		ADD BX, 2
NOTOK:	DEC CX
		JMP LOOPF
LOOPFND:LEA DX, OUT3
		MOV AH, 9
		INT 21H
		MOV AX, WORD PTR NUM
		MOV WORD PTR OUTNUM, AX
		CALL OUTPUT
		LEA DX, CLINE
		MOV AH, 9
		INT 21H
		MOV CX, WORD PTR NUM
		MOV BX, 0
LOOPH:	CMP CX, 0
		JE	LOOPHND
		MOV AX, WORD PTR OKNUM[BX]
		MOV WORD PTR OUTNUM, AX
		CALL OUTPUT
		LEA DX, CLINE
		MOV AH, 9
		INT 21H
		ADD BX, 2
		DEC CX
		JMP LOOPH
LOOPHND:MOV AH, 4CH
        INT 21H
		
INPUT PROC
		PUSHA
		PUSHF
		MOV WORD PTR READ, 0H
		MOV WORD PTR MULT, 1H
		MOV WORD PTR ISGET, 1H
		LEA DX, BUF
		MOV AH, 10
		INT 21H
		LEA DX, CLINE
		MOV AH, 9
		INT 21H
		MOV BL, BUF+1
		MOV BH, 0
		CMP BX, 0
		JE	GETWR
		MOV CX, BX
		DEC BX
LOOPB:	MOV AL, BYTE PTR BUF[BX+2]
		MOV AH, 0
		DEC BX
		CMP AX, 30H
		JS	GETWR
		CMP AX, 39H
		JA GETWR
		SUB AX, 30H
		MUL WORD PTR MULT
		JC	GETWR
		ADD WORD PTR READ, AX
		JC	GETWR
		MOV AX, 10
		MUL WORD PTR MULT
		MOV WORD PTR MULT, AX
		LOOP LOOPB
		JMP ENDGET
GETWR:	LEA DX, OUT2
		MOV AH, 9
		INT 21H
		MOV WORD PTR ISGET, 0H
ENDGET:	POPF
		POPA
		RET
INPUT ENDP

JUDGE PROC					
        PUSH BP				
        MOV BP, SP
        PUSHA				
        PUSHF
        MOV AX, 4[BP]		
        MOV CX, 6			
        MOV WORD PTR ISOK, 0H
LOOPA:  SHL AX, 1
        JNC BITWR
        LOOP LOOPA
        MOV WORD PTR ISOK, 1H
BITWR:  POPF
        POPA
        POP BP
        RET 4
JUDGE ENDP

OUTPUT PROC
		PUSHA
		PUSHF
		MOV AX, WORD PTR OUTNUM
		MOV BX, 10
		XOR CX, CX
LOOPI:	XOR DX, DX
		DIV BX
		OR 	DX, 0E30H
		PUSH DX		
		INC CX
		CMP AX, 0
		JNZ LOOPI
LOOPJ:	POP AX
		INT 10H
		LOOP LOOPJ
		POPF
		POPA
		RET
OUTPUT ENDP
CODE ENDS
        END START
